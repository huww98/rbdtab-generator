#!/usr/bin/python3

import os
from os import path
import re
import shlex
import sys

RDBTAB_PATH = os.environ.get('RDBTAB_PATH', '/etc/ceph/rbdtab')

RDBMAP_TEMPLATE = '''# Automatically generated by rbdtab-generator

[Unit]
SourcePath={rbdtab_path}
Description=Map RBD device {rbd_spec}
After=network-online.target ceph.target
Before=remote-fs-pre.target {mount_unit_name}
Wants=network-online.target
BindsTo={mount_unit_name}

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/bin/rbd device map {rbd_spec} {rdb_map_args}
ExecStop=/usr/bin/rbd device unmap {rbd_spec}
'''

AUTOMOUNT_TEMPLATE = '''# Automatically generated by rbdtab-generator

[Unit]
SourcePath={rbdtab_path}
Before=remote-fs.target

[Automount]
Where={mount_path}
TimeoutIdleSec=10
'''

MOUNT_TEMPLATE = '''# Automatically generated by rbdtab-generator

[Unit]
SourcePath={rbdtab_path}
After={map_unit_name}
Requires={map_unit_name}

[Mount]
What={rbd_dev_path}
Where={mount_path}
{mount_opt_lines}
'''

def systemd_escape(p: str, path=True):
    if path:
        if (p == '/'):
            return '-'
        p = p.strip('/')
        p = re.sub(r'/{2,}', '/', p)
    res = ''
    for c in p:
        if c == '/':
            res += '-'
        elif c.isalnum() or c == '_':
            res += c
        else:
            res += ''.join(R'\x{:02x}'.format(b) for b in c.encode())
    if res[0] == '.':
        res = R'\x2e' + res[1:]
    return res

def convert_map_args(args: str):
    args = args.split(',')
    return ' '.join(['--' + a for a in args])

def generate_one(line: str, dir_fd: int):
    def opener(path, flags):
        return os.open(path, flags, dir_fd=dir_fd)

    cells = shlex.split(line)
    rbd_spec, map_args, mount_path = cells[:3]
    rbd_dev_path = '/dev/rbd/' + rbd_spec
    escaped_mount_path = systemd_escape(mount_path, path=True)
    map_unit_name = 'rbdmap-{}.service'.format(systemd_escape(rbd_spec, path=False))
    mount_unit_name = escaped_mount_path + '.mount'
    automount_unit_name = escaped_mount_path + '.automount'

    template_args = {
        'rbdtab_path': RDBTAB_PATH,
        'rbd_spec': rbd_spec,
        'rdb_map_args': convert_map_args(map_args),
        'mount_unit_name': mount_unit_name,
    }
    with open(map_unit_name, 'w', opener=opener) as f:
        f.write(RDBMAP_TEMPLATE.format_map(template_args))

    template_args['mount_path'] = mount_path
    with open(automount_unit_name, 'w', opener=opener) as f:
        f.write(AUTOMOUNT_TEMPLATE.format_map(template_args))

    mount_opt_lines = ''
    if len(cells) >= 4:
        mount_opt_lines += 'Type={}\n'.format(cells[3])
        if len(cells) >= 5:
            mount_opt_lines += 'Options={}\n'.format(cells[4].replace('%', r'%%'))
    template_args['map_unit_name'] = map_unit_name
    template_args['mount_opt_lines'] = mount_opt_lines
    template_args['rbd_dev_path'] = rbd_dev_path
    with open(mount_unit_name, 'w', opener=opener) as f:
        f.write(MOUNT_TEMPLATE.format_map(template_args))

    # remote-fs.target requires automount
    remote_fs_target_requires = 'remote-fs.target.requires'
    try:
        os.mkdir(remote_fs_target_requires, mode=0o755, dir_fd=dir_fd)
    except FileExistsError:
        pass
    os.symlink(
        src=os.path.join('..', automount_unit_name),
        dst=os.path.join(remote_fs_target_requires, automount_unit_name),
        dir_fd=dir_fd,
    )

def generate(normal_dir: str, early_dir: str, late_dir: str):
    with open(RDBTAB_PATH, 'r') as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            dir_fd = os.open(normal_dir, os.O_RDONLY)
            generate_one(line, dir_fd)
            os.close(dir_fd)

def main():
    if len(sys.argv) == 1:
        generate('/tmp', '/tmp', '/tmp')
    elif len(sys.argv) == 4:
        generate(sys.argv[1], sys.argv[2], sys.argv[3])
    else:
        print('Wrong number of args')
        return 1

if __name__ == '__main__':
    exit(main())
